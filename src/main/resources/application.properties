# Server Configuration
server.port=${PORT:8080}
server.address=0.0.0.0

# Database Configuration
spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/teamwork_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC}
spring.datasource.username=${DATABASE_USERNAME:root}
spring.datasource.password=${DATABASE_PASSWORD:password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hikari Connection Pool Configuration (optimized for Railway)
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.leak-detection-threshold=60000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# Database Configuration - LOCAL ONLY
# These settings are for local development with MySQL
spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/teamwork_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC}
spring.datasource.username=${DATABASE_USERNAME:root}
spring.datasource.password=${DATABASE_PASSWORD:password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# HikariCP Configuration - Optimized for fast startup
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:validate}
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.properties.hibernate.format_sql=true

# SQL Initialization
spring.sql.init.mode=${SQL_INIT_MODE:never}
spring.sql.init.continue-on-error=true
spring.jpa.defer-datasource-initialization=false

# Railway-specific optimizations
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Logging Configuration for Railway
logging.level.com.teamwork.testbackapp=INFO
logging.level.org.springframework.boot=INFO
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# JWT Configuration
jwt.secret=${JWT_SECRET:OVdNSHE2OTdjWGRMZjdoUzFxUmVkbEtmaHJPNVhWY3ZEakFpZjNQemR1cDF2dnFNcDZWb05EWHBKSER0VzU0Rg==}
jwt.expiration=86400000
jwt.refresh-expiration=604800000

# File Upload Configuration
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# File Storage Configuration
file.upload-dir=./uploads
file.processed-dir=./processed

# Email Configuration (SMTP)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=your-email@gmail.com
spring.mail.password=your-app-password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Application Configuration
app.frontend.url=http://localhost:3000
app.name=TeamWork AI Platform
app.support.email=support@teamwork.com

# Admin User Configuration
app.admin.email=admin@teamwork.com
app.admin.password=admin123
app.admin.firstName=Admin
app.admin.lastName=User

# Logging Configuration
logging.level.com.teamwork.testbackapp=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework=WARN
logging.level.root=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# CORS Configuration
# Add your frontend URLs to CORS_ALLOWED_ORIGINS environment variable
# Example: CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,https://your-frontend.vercel.app,https://your-app.up.railway.app
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,http://localhost:5173,http://localhost:5174,https://aitoolkithub-frontend.vercel.app,https://ai-tool-kit-hub-frontend.vercel.app,https://*.railway.app,https://*.up.railway.app}
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
cors.allowed-headers=*
cors.allow-credentials=true

# Credit System Configuration
credits.welcome-bonus=50
credits.referral-bonus=25
credits.low-threshold=10

# File Processing Configuration
processing.max-concurrent-jobs=5
processing.cleanup-completed-after-days=7

# Redis Configuration (Disabled for development without Redis)
# spring.redis.host=${REDIS_HOST:localhost}
# spring.redis.port=${REDIS_PORT:6379}
# spring.redis.password=${REDIS_PASSWORD:}
# spring.redis.timeout=2000ms
# spring.redis.jedis.pool.max-active=8
# spring.redis.jedis.pool.max-idle=8
# spring.redis.jedis.pool.min-idle=0

# Redis Session Configuration (Disabled - using default session management)
# spring.session.store-type=redis
# spring.session.redis.namespace=teamwork:session
# spring.session.timeout=1800s

# Redis Cache Configuration (Disabled - using simple cache)
# spring.cache.type=redis
# spring.cache.redis.time-to-live=3600000
# spring.cache.redis.cache-null-values=false
# spring.cache.redis.key-prefix=teamwork:cache:

# OAuth2 - Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:dummy-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:dummy-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}

spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:dummy-github-client-id}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:dummy-github-client-secret}
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri=${GITHUB_REDIRECT_URI:http://localhost:8080/login/oauth2/code/github}

# Stripe Configuration
stripe.api.key=${STRIPE_SECRET_KEY:sk_test_dummy_stripe_key}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:whsec_dummy_webhook_secret}
stripe.success.url=${STRIPE_SUCCESS_URL:http://localhost:8080/payment/success}
stripe.cancel.url=${STRIPE_CANCEL_URL:http://localhost:8080/payment/cancel}

# Security Headers
server.servlet.session.cookie.secure=${COOKIE_SECURE:false}
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.same-site=lax

# Paddle Configuration
paddle.api.url=${PADDLE_API_URL:https://sandbox-api.paddle.com}
paddle.vendor.id=${PADDLE_VENDOR_ID:dummy-vendor-id}
paddle.api.key=${PADDLE_API_KEY:dummy-api-key}
paddle.public.key=${PADDLE_PUBLIC_KEY:dummy-public-key}
paddle.webhook.secret=${PADDLE_WEBHOOK_SECRET:dummy-webhook-secret}
paddle.environment=${PADDLE_ENVIRONMENT:sandbox}
paddle.product.id=${PADDLE_PRODUCT_ID:dummy-product-id}
paddle.webhook.url=${PADDLE_WEBHOOK_URL:http://localhost:8080/api/paddle/webhook}

# Credit packages configuration
credits.packages.basic.credits=100
credits.packages.basic.price=10.00
credits.packages.basic.product-id=pri_01k2wjhwkp3xj21hd9r97dnmyc

credits.packages.standard.credits=450
credits.packages.standard.price=20.00
credits.packages.standard.product-id=pri_01k2xdcb1rqysqjmtxkbnyps1g

credits.packages.premium.credits=1200
credits.packages.premium.price=50.00
credits.packages.premium.product-id=pri_01k2xdcq1hp89ydff53q28t6yj

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
management.endpoints.web.base-path=/actuator